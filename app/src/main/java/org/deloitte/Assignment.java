/*
 * This source file was generated by the Gradle 'init' task
 */
package org.deloitte;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.deloitte.atm.*;

import java.util.Map;
import java.util.logging.Logger;


public class Assignment {
    private static final Logger logger = Logger.getLogger(Assignment.class.getName());

    public static void main(String[] args) {

        // Define currency
        Currency rupee = Currency.builder().currency("Rupees").symbol("Rs").build();

        // Define ATM Machine
        ATMMachine atmMachine = setupATM(rupee);

        // Define dispersal systems
        CashDispersalSystem slot1 = CashDispersalSystem.builder().dispersalId("Slot1").build();
        CashDispersalSystem slot2 = CashDispersalSystem.builder().dispersalId("Slot2").build();
        atmMachine.addDispersalSystem(slot1);
        atmMachine.addDispersalSystem(slot2);

        try {
            Thread transaction1 = new Thread(() -> atmMachine.userCashWithdrawal(slot1,rupee, 400));
            Thread transaction2 = new Thread(() -> atmMachine.userCashWithdrawal(slot2,rupee, 1200));
            transaction1.start();
            transaction2.start();
            try {
                transaction1.join();
                transaction2.join();
            } catch (InterruptedException e) {
                logger.severe("Error occurred while joining threads " + e);
            }
            Map<String, CashWithdrawRequest> requestsOnHold = atmMachine.getTransactionsOnHold();

           ObjectMapper objectMapper = new ObjectMapper();
           logger.info(objectMapper.writeValueAsString(requestsOnHold));

        } catch (Exception e) {
            System.out.println(e.getMessage());
            logger.severe(e.getMessage());
        }

    }

    /**
     * setting up the ATM initially
     *
     * @param currency for denomination
     */
    private static ATMMachine setupATM(Currency rupee){

        // Define denomination
        Denomination rupees100 = Denomination.builder().currency(rupee).value(100).build();
        Denomination rupees500 = Denomination.builder().currency(rupee).value(500).build();

        // Define ATM Machine
        ATMMachine atmMachine = new ATMMachine();

        // Define ATM Cash Pool and add money
        ATMCash rupeeCashPool = new ATMCash(rupee);

        atmMachine.addCashPool(rupeeCashPool);
        atmMachine.addCashToCashPool(rupee, rupees500, 9);
        atmMachine.addCashToCashPool(rupee, rupees100, 1);

        return atmMachine;
    }
}
